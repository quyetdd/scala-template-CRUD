/*
 * Scala bean class for entity table ${entity.databaseTable} 
 * Created on $today.date ( Date ISO $today.date("yyyy-MM-dd") - Time $today.time )
 * Generated by quyetddd ( version $generator.version )
 */

package trams.bao.modules.bean.dao.genarate

import play.api.Play.current
import play.api._
import play.api.mvc._
import play.api.db._
import org.joda.time._
import org.joda.time.Days
import org.joda.time.DateTime

#foreach( $import in $java.imports($entity) )
import $import
#end

/**
 * CRUD Entity bean for table "${entity.databaseTable}"
 * 
 * @author quyetdd Tools Generator
 *
 */

object $entity.name {

    case class ${entity.name}(
#foreach( $field in $entity.keyAttributes )
    var $field.formattedName(0):#if($field.type=="Integer")Int #else $field.type #end
#end

#foreach( $field in $entity.nonKeyAttributes )
   , var $field.formattedName(0):#if($field.type=="Integer")Int #else #if($field.type=="Date")DateTime#else$field.type #end#end
    
#end
)
  case class Paging_${entity.name}(obj:List[${entity.name}],total:Long)

def instant() : ${entity.name} = {
    var _instant = new ${entity.name}(
    0 #foreach( $field in $entity.nonKeyAttributes )

   ,#if($field.type=="Integer"||$field.type=="Long"||$field.type=="Byte"||$field.type=="Double"||$field.type=="Short"||$field.type=="Float")0#else #if($field.type=="Boolean")false #else null#end #end // $field.formattedName(0)  - $field.type
	#end
    ) 
    return _instant
  }

 def toJson(obj: $entity.name): play.api.libs.json.JsObject = {
    var json: play.api.libs.json.JsObject = play.api.libs.json.Json.obj("table" -> "$entity.name" #foreach($field in $entity.keyAttributes),"$field.formattedName(0)" -> obj.$field.formattedName(0)#end#foreach($field in $entity.nonKeyAttributes),"$field.formattedName(0)" -> obj.$field.formattedName(0)#end)
    return json
  }

//----------------------------------------------------------------------
// CRUD
//----------------------------------------------------------------------

//List
  def getList(page: Int, record: Int, order: String, sort: String, where: List[trams.bao.utils.item.Parameter]): Paging_$entity.name = {
    val outString = ""
    var count=0
    var list = List[$entity.name]()
    var where_str = "WHERE 1=1"
    if(where != null && where.size > 0){
        where.foreach { x => 
          where_str += " AND "+x.paraKey.toString() +" ?"
        }
	  }

    val conn = DB.getConnection()

    try {
      var page_1 = page

      if(page_1 <= 0){
        page_1 = 1
	  }

      val start = (( record * page_1 ) - record)    
      val prepCount = conn.prepareStatement("SELECT count(#foreach($field in $entity.keyAttributes)$field.formattedName(0)#end) as count from $entity.name " + where_str)

          if(where != null && where.size > 0){
            where.zipWithIndex.foreach { case(x,i) => 
				 var index = i +1	

                //Integer
                if(x.paraVal.isInstanceOf[java.lang.Integer]){
                  prepCount.setInt(index, x.paraVal.toString.toInt)
                  
                //String
                }else if(x.paraVal.isInstanceOf[java.lang.String]){
                  prepCount.setString(index, x.paraVal.toString)
                  
                //Timestamp
                }else if(x.paraVal.isInstanceOf[java.sql.Date]){
                  val format = new java.text.SimpleDateFormat("yyyy-MM-dd hh:mm:ss")
                  val date = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(format.format(x.paraVal))
            	  prepCount.setTimestamp(index,new java.sql.Timestamp(date.getTime))
            	    
            	  //Double
                }else if(x.paraVal.isInstanceOf[java.lang.Double]){
                   prepCount.setDouble(index, x.paraVal.toString.toDouble)
                   
                //Float   
                }else if(x.paraVal.isInstanceOf[java.lang.Float]){
                   prepCount.setFloat(index, x.paraVal.toString().toFloat)
                   
                //Boolean 
                }else if(x.paraVal.isInstanceOf[java.lang.Boolean]){
                   prepCount.setBoolean(index, x.paraVal.toString().toBoolean)
                   
                //Long 
                }else if(x.paraVal.isInstanceOf[java.lang.Long]){
                   prepCount.setLong(index, x.paraVal.toString().toLong)
                } 
              }
      	  }

	  val rs_count = prepCount.executeQuery()
      while (rs_count.next()) {
       count = rs_count.getInt("count")
      }

      val prep = conn.prepareStatement("SELECT * from ${entity.name} " + where_str + " order by " + order + " " + sort + " limit " + start + "," + record)

          if(where != null && where.size > 0){

            where.zipWithIndex.foreach { case(x,i) => 
				 var index = i +1

                //Integer
                if(x.paraVal.isInstanceOf[java.lang.Integer]){
                  prep.setInt(index, x.paraVal.toString.toInt)
                  
                //String
                }else if(x.paraVal.isInstanceOf[java.lang.String]){
                  prep.setString(index, x.paraVal.toString)
                  
                //Timestamp
                }else if(x.paraVal.isInstanceOf[java.sql.Date]){
                  val format = new java.text.SimpleDateFormat("yyyy-MM-dd hh:mm:ss")
                  val date = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(format.format(x.paraVal))
            	    prep.setTimestamp(index,new java.sql.Timestamp(date.getTime))
            	    
            	  //Double
                }else if(x.paraVal.isInstanceOf[java.lang.Double]){
                   prep.setDouble(index, x.paraVal.toString.toDouble)
                   
                //Float   
                }else if(x.paraVal.isInstanceOf[java.lang.Float]){
                   prep.setFloat(index, x.paraVal.toString().toFloat)
                   
                //Boolean 
                }else if(x.paraVal.isInstanceOf[java.lang.Boolean]){
                   prep.setBoolean(index, x.paraVal.toString().toBoolean)
                   
                //Long 
                }else if(x.paraVal.isInstanceOf[java.lang.Long]){
                   prep.setLong(index, x.paraVal.toString().toLong)
                } 
              }
      	  }
	  	val rs = prep.executeQuery()
      	while (rs.next()) {
        	val pes = new ${entity.name}(
#foreach( $field in $entity.keyAttributes )
   			#if($field.type=="Integer")rs.getInt("$field.formattedName(0)") #else #if($field.type=="Date")new DateTime(rs.get${field.type}("$field.formattedName(0)"))#else rs.get${field.type}("$field.formattedName(0)")#end#end
#end

#foreach( $field in $entity.nonKeyAttributes )
    			,#if($field.type=="Integer")rs.getInt("$field.formattedName(0)") #else#if($field.type=="Date")new DateTime(rs.get${field.type}("$field.formattedName(0)"))#else rs.get${field.type}("$field.formattedName(0)")#end#end

#end
			)
       		 list = list :+ pes
      		}
    	} finally {
      		conn.close()
    	}

    	return Paging_${entity.name}(list,count)
  		}

//List
  def getOne(id: #foreach( $field in $entity.keyAttributes )#if($field.type=="int")Int#else$field.type#end
#end): $entity.name = {
   
    var one = List[${entity.name}]()
    val conn = DB.getConnection()
    try {
      val prep = conn.prepareStatement("SELECT * from ${entity.name} where #foreach( $field in $entity.keyAttributes )$field.formattedName(0)#end = ? ")
	  prep.setInt(0, id)

      val rs = prep.executeQuery()
      if (rs.next()) {
        val pes = new ${entity.name}(
#foreach( $field in $entity.keyAttributes )
   #if($field.type=="Integer")rs.getInt("$field.formattedName(0)") #else rs.get${field.type}("$field.formattedName(0)")#end
#end

#foreach( $field in $entity.nonKeyAttributes )
    ,#if($field.type=="Integer")rs.getInt("$field.formattedName(0)") #else#if($field.type=="Date")new DateTime(rs.get${field.type}("$field.formattedName(0)"))#else rs.get${field.type}("$field.formattedName(0)")#end#end
    
#end
)
        one = one :+ pes

      }
    } finally {
      conn.close()
    }

    return one.last
  }

  def getOne(where: List[trams.bao.utils.item.Parameter]): $entity.name = {
   
    var one = List[${entity.name}]()
    var where_str = "WHERE 1=1"
    if(where != null && where.size > 0){
        where.foreach { x => 
          where_str += " AND "+x.paraKey.toString() +" ?"
        }
	  }

    val conn = DB.getConnection()
    try {
      val prep = conn.prepareStatement("SELECT * from ${entity.name} "+ where_str)
          if(where != null && where.size > 0){
            where.zipWithIndex.foreach { case(x,i) => 
				 var index = i +1

                //Integer
                if(x.paraVal.isInstanceOf[java.lang.Integer]){
                  prep.setInt(index, x.paraVal.toString.toInt)
                  
                //String
                }else if(x.paraVal.isInstanceOf[java.lang.String]){
                  prep.setString(index, x.paraVal.toString)
                  
                //Timestamp
                }else if(x.paraVal.isInstanceOf[java.sql.Date]){
                  val format = new java.text.SimpleDateFormat("yyyy-MM-dd hh:mm:ss")
                  val date = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(format.format(x.paraVal))
            	  prep.setTimestamp(index,new java.sql.Timestamp(date.getTime))
            	    
            	  //Double
                }else if(x.paraVal.isInstanceOf[java.lang.Double]){
                   prep.setDouble(index, x.paraVal.toString.toDouble)
                   
                //Float   
                }else if(x.paraVal.isInstanceOf[java.lang.Float]){
                   prep.setFloat(index, x.paraVal.toString().toFloat)
                   
                //Boolean 
                }else if(x.paraVal.isInstanceOf[java.lang.Boolean]){
                   prep.setBoolean(index, x.paraVal.toString().toBoolean)
                   
                //Long 
                }else if(x.paraVal.isInstanceOf[java.lang.Long]){
                   prep.setLong(index, x.paraVal.toString().toLong)
                } 
              }
      	  }

      val rs = prep.executeQuery()
      if (rs.next()) {
        val pes = new ${entity.name}(
#foreach( $field in $entity.keyAttributes )
   #if($field.type=="Integer")rs.getInt("$field.formattedName(0)") #else rs.get${field.type}("$field.formattedName(0)")#end
#end

#foreach( $field in $entity.nonKeyAttributes )
    ,#if($field.type=="Integer")rs.getInt("$field.formattedName(0)") #else#if($field.type=="Date")new DateTime(rs.get${field.type}("$field.formattedName(0)"))#else rs.get${field.type}("$field.formattedName(0)")#end#end
    
#end
)
        one = one :+ pes

      }
    } finally {
      conn.close()
    }

    return one.last
  }


//Insert
  def insert(obj:${entity.name}): Boolean = {
    
    val conn = DB.getConnection()
    try {
      val sql="INSERT INTO ${entity.name}(#foreach( $field in $entity.keyAttributes )$field.formattedName(0)#end #foreach( $field in $entity.nonKeyAttributes ),$field.formattedName(0)#end) VALUES (?#foreach( $field in $entity.nonKeyAttributes ),?#end)"
      val prep = conn.prepareStatement(sql)

#set( $index = 1 )
#foreach( $field in $entity.keyAttributes )
   			#if($field.type=="Integer")
	  prep.setInt($index, obj.$field.formattedName(0))
	  #set( $index = ($index+1) )
			#end
#end

#foreach( $field in $entity.nonKeyAttributes )
    #if($field.type=="Integer")
	prep.setInt($index, obj.$field.formattedName(0))
	#set( $index = ($index+1) )
#else
	#if($field.type=="Date")
	prep.setDate($index, new java.sql.Date(obj.$field.formattedName(0) .toDate().getTime))
	#else 
	prep.set${field.type}($index, obj.$field.formattedName(0))
	#end
	#set( $index = ($index+1) )
#end
    
#end

        println(sql)  
		val count = prep.executeUpdate()
		if(count > 0){
			return true;
		}else{
			return true;
		}
    	
    }catch {
      case t: Throwable =>false // TODO: handle error
    } finally {
      conn.close()
    }
  }
//Update
  def update(obj:${entity.name}): Boolean = {
    Boolean 
   
  
    val conn = DB.getConnection()
    try {
      val sql="UPDATE ${entity.name} SET #foreach( $field in $entity.keyAttributes )$field.formattedName(0)="+obj.$field.formattedName(0)+"#end#foreach($field in $entity.nonKeyAttributes ), $field.formattedName(0) = ?#end WHERE #foreach( $field in $entity.keyAttributes )$field.formattedName(0)=?"#end
 	  
	  val prep = conn.prepareStatement(sql)	

#set( $index = 1 )

#foreach( $field in $entity.nonKeyAttributes )
    #if($field.type=="Integer")
	prep.setInt($index, obj.$field.formattedName(0))
	#set( $index = ($index+1) )
#else
	#if($field.type=="Date")
	prep.setDate($index, new java.sql.Date(obj.$field.formattedName(0) .toDate().getTime))
	#else 
	prep.set${field.type}($index, obj.$field.formattedName(0))
	#end
	#set( $index = ($index+1) )
#end
    
#end

#foreach( $field in $entity.keyAttributes )
   	  #if($field.type=="Integer")
	  prep.setInt($index, obj.$field.formattedName(0))
	  #set( $index = ($index+1) )
			#end
#end

        println(sql)

		val count = prep.executeUpdate()
		if(count > 0){
			return true;
		}else{
			return true;
		}
    }catch {
      case t: Throwable =>false // TODO: handle error
    } finally {
      conn.close()
    }
  }
  //Delete
  def delete(id: #foreach( $field in $entity.keyAttributes )#if($field.type=="int")Int#else$field.type#end
#end): Boolean = {
    Boolean 
   
   
    val conn = DB.getConnection()
    try {
      val stmt = conn.createStatement
      val sql="DELETE FROM ${entity.name} WHERE #foreach( $field in $entity.keyAttributes )$field.formattedName(0)#end="+id
println(sql)
      val rs_count = stmt.executeUpdate(sql)
        return true;
    }catch {
      case t: Throwable =>false // TODO: handle error
    } finally {
      conn.close()
    }
  }
}

