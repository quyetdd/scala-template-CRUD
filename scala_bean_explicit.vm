/*
 * Scala bean class for entity table ${entity.databaseTable} 
 * Created on $today.date ( Date ISO $today.date("yyyy-MM-dd") - Time $today.time )
 * Generated by quyetddd ( version $generator.version )
 */

package ${target.javaPackageFromFolder(${SRC})}

import play.api.Play.current
import play.api._
import play.api.mvc._
import play.api.db._
import org.joda.time._
import org.joda.time.Days
import org.joda.time.DateTime

#foreach( $import in $java.imports($entity) )
import $import
#end

/**
 * CRUD Entity bean for table "${entity.databaseTable}"
 * 
 * @author quyetdd Tools Generator
 *
 */

object $entity.name {

    case class ${entity.name}(
#foreach( $field in $entity.keyAttributes )
    var $field.formattedName(0):#if($field.type=="Integer")Int #else $field.type #end
#end

#foreach( $field in $entity.nonKeyAttributes )
   , var $field.formattedName(0):#if($field.type=="Integer")Int #else #if($field.type=="Date")DateTime#else$field.type #end#end
    
#end
)
  case class Paging_${entity.name}(obj:List[${entity.name}],total:Long)

def instant() : ${entity.name} = {
    var _instant = new ${entity.name}(
    0 #foreach( $field in $entity.nonKeyAttributes )

   ,#if($field.type=="Integer"||$field.type=="Long"||$field.type=="Byte"||$field.type=="Double"||$field.type=="Short"||$field.type=="Float")0#else #if($field.type=="Boolean")false #else null#end #end // $field.formattedName(0)  - $field.type
	#end
    ) 
    return _instant
  }
//----------------------------------------------------------------------
// CRUD
//----------------------------------------------------------------------

//List
  def getList(page: Int, record: Int, order: String, sort: String, where: String): Paging_$entity.name = {
    val outString = ""
    var count=0
    var list = List[$entity.name]()
    var where_str=""
     if(where != "")
      where_str = " where " + where + " " 
    val conn = DB.getConnection()
    try {

      val stmt = conn.createStatement
      var page_1 = page
      if(page_1 <= 0)
        page_1 = 1
      val start = (( record * page_1 ) - record)    
      val rs_count = stmt.executeQuery("SELECT count(#foreach($field in $entity.keyAttributes)$field.formattedName(0)#end) as count from $entity.name " + where_str)
      while (rs_count.next()) {
       count = rs_count.getInt("count")
      }
      val rs = stmt.executeQuery("SELECT * from ${entity.name} " + where_str + " order by " + order + " " + sort + " limit " + start + "," + record)

      while (rs.next()) {
        val pes = new ${entity.name}(
#foreach( $field in $entity.keyAttributes )
   #if($field.type=="Integer")rs.getInt("$field.formattedName(0)") #else #if($field.type=="Date")new DateTime(rs.get${field.type}("$field.formattedName(0)"))#else rs.get${field.type}("$field.formattedName(0)")#end#end
#end

#foreach( $field in $entity.nonKeyAttributes )
    ,#if($field.type=="Integer")rs.getInt("$field.formattedName(0)") #else#if($field.type=="Date")new DateTime(rs.get${field.type}("$field.formattedName(0)"))#else rs.get${field.type}("$field.formattedName(0)")#end#end
    
#end
)
        list = list :+ pes

      }
    } finally {
      conn.close()
    }

    return Paging_${entity.name}(list,count)
  }

//List
  def getOne(id: #foreach( $field in $entity.keyAttributes )#if($field.type=="int")Int#else$field.type#end
#end): $entity.name = {
   
    var one = List[${entity.name}]()
    val conn = DB.getConnection()
    try {

      val stmt = conn.createStatement
 
      val rs = stmt.executeQuery("SELECT * from ${entity.name} where #foreach( $field in $entity.keyAttributes )$field.formattedName(0)#end="+id)

      while (rs.next()) {
        val pes = new ${entity.name}(
#foreach( $field in $entity.keyAttributes )
   #if($field.type=="Integer")rs.getInt("$field.formattedName(0)") #else rs.get${field.type}("$field.formattedName(0)")#end
#end

#foreach( $field in $entity.nonKeyAttributes )
    ,#if($field.type=="Integer")rs.getInt("$field.formattedName(0)") #else#if($field.type=="Date")new DateTime(rs.get${field.type}("$field.formattedName(0)"))#else rs.get${field.type}("$field.formattedName(0)")#end#end
    
#end
)
        one = one :+ pes

      }
    } finally {
      conn.close()
    }

    return one.last
  }


//Insert
  def insert(obj:${entity.name}): Boolean = {
    
    val conn = DB.getConnection()
    try {
      val stmt = conn.createStatement
      val sql="Insert into ${entity.name}(#foreach( $field in $entity.keyAttributes )$field.formattedName(0)#end #foreach( $field in $entity.nonKeyAttributes ),$field.formattedName(0)#end) values (NULL#foreach( $field in $entity.nonKeyAttributes ),#if($field.type=="Integer"||$field.type=="Long"||$field.type=="Byte"||$field.type=="Double"||$field.type=="Short"||$field.type=="Float")"+obj.$field.formattedName(0)+"#else#if($field.type=="Date")STR_TO_DATE(SUBSTRING('"+obj.$field.formattedName(0)+"',1,19),'%Y-%m-%dT%H:%i:%s') #else'"+obj.$field.formattedName(0)+"'#end#end#end)"

println(sql)   
   
val rs_count = stmt.executeUpdate(sql)
              return true;
    }catch {
      case t: Throwable =>false // TODO: handle error
    } finally {
      conn.close()
    }
  }
//Update
  def update(obj:${entity.name}): Boolean = {
    Boolean 
   
  
    val conn = DB.getConnection()
    try {
      val stmt = conn.createStatement
      val sql="Update ${entity.name} set #foreach( $field in $entity.keyAttributes )$field.formattedName(0)="+obj.$field.formattedName(0)+"#end#foreach($field in $entity.nonKeyAttributes ),$field.formattedName(0)=#if($field.type=="Integer"||$field.type=="Long"||$field.type=="Byte"||$field.type=="Double"||$field.type=="Short"||$field.type=="Float")"+obj.$field.formattedName(0)+"#else#if($field.type=="Date")STR_TO_DATE(SUBSTRING('"+obj.$field.formattedName(0)+"',1,19),'%Y-%m-%dT%H:%i:%s') #else'"+obj.$field.formattedName(0)+"'#end#end#end where #foreach( $field in $entity.keyAttributes )$field.formattedName(0)="+obj.$field.formattedName(0)#end

println(sql)

      val rs_count = stmt.executeUpdate(sql)
     
        return true;
    }catch {
      case t: Throwable =>false // TODO: handle error
    } finally {
      conn.close()
    }
  }
  //Delete
  def delete(id: #foreach( $field in $entity.keyAttributes )#if($field.type=="int")Int#else$field.type#end
#end): Boolean = {
    Boolean 
   
   
    val conn = DB.getConnection()
    try {
      val stmt = conn.createStatement
      val sql="Delete from ${entity.name} where #foreach( $field in $entity.keyAttributes )$field.formattedName(0)#end="+id
println(sql)
      val rs_count = stmt.executeUpdate(sql)
        return true;
    }catch {
      case t: Throwable =>false // TODO: handle error
    } finally {
      conn.close()
    }
  }
}

